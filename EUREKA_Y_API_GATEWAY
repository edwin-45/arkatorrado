# Documentación completa: API Gateway y Eureka Server

Esta guía describe cómo funciona y cómo ejecutar los módulos API Gateway y Eureka Server del proyecto, su configuración, rutas disponibles, seguridad, despliegue con Docker y resolución de problemas comunes.

Índice:
- Introducción
- Requisitos
- Puertos y servicios
- Eureka Server
  - Resumen
  - Configuración (application.yml)
  - Seguridad
  - Ejecución local
  - Despliegue con Docker
  - Integración de clientes
  - Observabilidad
  - Problemas comunes
- API Gateway
  - Resumen
  - Rutas y mapeos
  - Endpoints del propio Gateway
  - Descubrimiento de servicios
  - Ejecución local
  - Consideraciones de seguridad
  - Observabilidad y logging
  - Problemas comunes
- Ejemplos de prueba (curl)
- Recomendaciones y buenas prácticas

---

## Introducción

La arquitectura está basada en microservicios registrados en un Service Discovery (Eureka Server). El API Gateway (Spring Cloud Gateway) actúa como punto de entrada único, enruta tráfico a los microservicios y expone endpoints de información y salud.

- Eureka Server: Service Discovery (puerto 8761)
- API Gateway: Proxy y ruteo (puerto 8080)

Este documento está basado en el código en:
- eureka-server
- api-gateway

---

## Requisitos

- Java 21 (Temurin o equivalente)
- Gradle (el proyecto incluye Gradle Wrapper)
- Docker (opcional, para despliegue en contenedor)

---

## Puertos y servicios

- Eureka Server: 8761 (UI del dashboard en /)
- API Gateway: 8080
- Aplicación principal (mencionada en mensajes del Gateway): 8888 (externa a este módulo)

---

## Eureka Server

### Resumen

Eureka Server es el registro de servicios. Los microservicios clientes se registran y el API Gateway (y otros clientes) descubren sus ubicaciones a través de él.

Archivo clave:
- eureka-server/src/main/resources/application.yml
- eureka-server/src/main/java/com/skillnest/eurekaserver/config/SecurityConfig.java
- eureka-server/Dockerfile

### Configuración (application.yml)

Configuración principal (resumen):
- Puerto: 8761
- spring.security.user: credenciales por defecto admin/admin123
- eureka.client.register-with-eureka: false
- eureka.client.fetch-registry: false
- eureka.server.enable-self-preservation: false
- eureka.instance.hostname: localhost

La URL por defecto para clientes:
- defaultZone: http://admin:admin123@localhost:8761/eureka/

Nota: Aunque se incluyen credenciales en la URL, se ha configurado acceso libre a /eureka/** (ver seguridad).

### Seguridad

SecurityConfig (resumen):
- Se desactiva CSRF
- Se permite sin autenticación: /eureka/**
- Cualquier otra ruta requiere autenticación HTTP Basic
- Se define usuario/contraseña por defecto: admin/admin123

Implicaciones:
- El dashboard y las rutas de eureka (UI y endpoints /eureka/**) son públicas.
- Endpoints como /actuator/** requieren autenticación básica, a menos que se ajusten las reglas.

Sugerencia:
- Si necesitas proteger /eureka/**, elimina el permitAll y obliga HTTP Basic.
- Si quieres permitir /actuator/health sin auth (recomendado para healthchecks), añade permitAll para /actuator/health.

Ejemplo de ajuste rápido:
- Cambiar SecurityConfig para permitir /actuator/health:
  - .requestMatchers("/eureka/**", "/actuator/health").permitAll()

### Ejecución local

1) Ejecutar con Gradle:
- Linux/Mac: ./gradlew :eureka-server:bootRun
- Windows:   gradlew.bat :eureka-server:bootRun

2) Ejecutar JAR (tras build):
- Build: ./gradlew :eureka-server:build
- Ejecutar: java -jar eureka-server/build/libs/eureka-server-<version>.jar

3) Acceso:
- UI: http://localhost:8761
- Endpoint de eureka: http://localhost:8761/eureka/

### Despliegue con Docker

El Dockerfile realiza build de sólo el módulo eureka-server y genera una imagen runtime basada en JRE Alpine.

Build:
- docker build -t arka-eureka-server -f eureka-server/Dockerfile .

Run:
- docker run --name eureka -p 8761:8761 arka-eureka-server

Healthcheck del contenedor:
- Actualmente apunta a http://localhost:8761/actuator/health
- Por defecto, ese endpoint requiere autenticación básica, por lo que el healthcheck fallará.

Soluciones:
- Permitir /actuator/health en SecurityConfig (recomendado)
- O cambiar el HEALTHCHECK para enviar credenciales: curl -f -u admin:admin123 http://localhost:8761/actuator/health

### Integración de clientes

Para un microservicio que se registra en Eureka, configura:
- eureka.client.service-url.defaultZone: http://admin:admin123@<host>:8761/eureka/
- eureka.instance.prefer-ip-address: true (opcional)
- spring.application.name: <nombre-del-servicio>

En Docker Compose o una red Docker, NO uses localhost dentro del contenedor. Usa el nombre del servicio de Eureka, por ejemplo:
- http://admin:admin123@eureka-server:8761/eureka/

### Observabilidad

- Para exponer /actuator/**, añade configuración en application.yml del módulo y ajusta seguridad.
- Ejemplo (en Eureka):
  - management.endpoints.web.exposure.include: "*"
  - management.endpoint.health.show-details: "always"
- Recuerda ajustar SecurityConfig si quieres acceder sin autenticación a endpoints de salud.

### Problemas comunes (Eureka)

- Healthcheck de Docker falla:
  - Causa: /actuator/health requiere auth
  - Solución: permitir /actuator/health o usar curl con -u admin:admin123

- Clientes no se registran:
  - Verifica la URL defaultZone
  - En contenedores, evita localhost; usa el nombre DNS interno (eureka-server) o la IP

- La UI de Eureka no carga:
  - Asegura que el puerto 8761 está expuesto y que el contenedor está UP
  - Revisa logs de arranque

---

## API Gateway

### Resumen

API Gateway basado en Spring Cloud Gateway. Expone rutas hacia microservicios registrados en Eureka y provee endpoints informativos:
- GET /           -> info del Gateway
- GET /health     -> estado rápido
- GET /routes     -> descripción de rutas

Archivos clave:
- api-gateway/src/main/resources/application.yml
- api-gateway/src/main/java/com/skillnest/apigateway/config/GatewayConfig.java
- api-gateway/src/main/java/com/skillnest/apigateway/controller/*.java

Nota importante: Las rutas están definidas tanto en application.yml como en GatewayConfig.java. Evita duplicidades o inconsistencias manteniendo una única fuente de verdad (recomendado: sólo YAML o sólo Java).

### Rutas y mapeos

Rutas definidas en application.yml:

| ID                        | Path                  | Destino (URI)                     | Filtros            | Notas |
|--------------------------|-----------------------|-----------------------------------|--------------------|-------|
| auth-service             | /auth/**              | lb://arka-gestor-solicitudes      | –                  | Sin restricciones de roles |
| admin-service            | /api/admin/**         | lb://arka-gestor-solicitudes      | –                  | – |
| gestion-service          | /api/gestion/**       | lb://arka-gestor-solicitudes      | –                  | – |
| operaciones-service      | /api/operaciones/**   | lb://arka-gestor-solicitudes      | –                  | – |
| calculos-service         | /api/calculos/**      | lb://arka-gestor-solicitudes      | –                  | – |
| cotizador-service        | /api/cotizador/**     | lb://arka-cotizador               | StripPrefix=2      | Reenvía sin /api/cotizador |
| gestor-solicitudes       | /api/gestor/**        | lb://arka-gestor-solicitudes      | StripPrefix=2      | Reenvía sin /api/gestor |
| hello-world-service      | /api/hello/**         | lb://hello-world-service          | StripPrefix=2      | – |
| eureka-server            | /eureka/**            | http://localhost:8761             | –                  | Proxy directo al dashboard de Eureka |

Rutas en GatewayConfig.java (Java):
- /api/hello/** -> lb://hello-world-service (StripPrefix=2)
- /api/cotizador/** -> lb://arca-cotizador (StripPrefix=2)
- /api/gestor/** -> lb://arca-gestor-solicitudes (StripPrefix=2)
- /eureka/** -> http://localhost:8761

Duplicidad:
- Estas rutas existen también en el YAML. Se recomienda unificar para evitar mantenimiento doble.

StripPrefix=2:
- Un request a /api/cotizador/precios/lista se reenvía como /precios/lista al servicio arca-cotizador.

Ruta hacia Eureka:
- En local funciona con http://localhost:8761
- En contenedores, localhost apunta al propio contenedor del Gateway; usa la URL del servicio de Eureka (por ejemplo, http://eureka:8761). Ajusta el YAML en despliegues en Docker/K8s.

### Endpoints del propio Gateway

Controlador GatewayController:
- GET / 
  - Devuelve JSON con información del gateway, versión, servicios disponibles y ejemplos.
- GET /health
  - Estado “UP” con timestamp.
- GET /routes
  - Mapa descriptivo de rutas previstas (informativo).

Manejador global de errores (GlobalErrorHandler):
- Cualquier ruta no encontrada devuelve 404 con un JSON autoexplicativo y sugerencias.

Ejemplo de respuesta 404:
{
  "error": true,
  "status": 404,
  "message": "Route not found in API Gateway",
  "service": "api-gateway",
  "timestamp": 172xxxxxxx,
  "suggestion": "Visit / for available routes and services",
  "availableEndpoints": {
    "home": "/",
    "health": "/health",
    "routes": "/routes",
    "authentication": "/auth/login",
    "mainApp": "http://localhost:8888"
  }
}

### Descubrimiento de servicios

Activado por configuración:
- spring.cloud.gateway.discovery.locator.enabled: true
- lower-case-service-id: true

Esto permite que el Gateway descubra dinámicamente servicios registrados en Eureka usando lb://<service-id>.

### Ejecución local

1) Ejecutar con Gradle:
- Linux/Mac: ./gradlew :api-gateway:bootRun
- Windows:   gradlew.bat :api-gateway:bootRun

2) Ejecutar JAR (tras build):
- Build: ./gradlew :api-gateway:build
- Ejecutar: java -jar api-gateway/build/libs/api-gateway-<version>.jar

3) Requisitos:
- Asegura que Eureka Server está corriendo (por ejemplo, http://localhost:8761)
- Asegura que los microservicios objetivo estén registrados en Eureka con los service-id usados en las rutas (p. ej., arka-gestor-solicitudes, arca-cotizador, hello-world-service)

4) Acceso:
- Home: http://localhost:8080/
- Salud: http://localhost:8080/health
- Rutas: http://localhost:8080/routes
- Rutas proxied: según tabla de rutas

### Consideraciones de seguridad

- No hay configuración de seguridad específica en el módulo del Gateway (abierto por defecto).
- Si necesitas proteger rutas (auth JWT, API keys, RBAC), añade dependencias de Spring Security/Spring Authorization Server o filtros personalizados del Gateway.

Ejemplos:
- Filtro de autenticación por token JWT
- Validación de roles en headers/claims antes de enrutar

### Observabilidad y logging

Configurado en application.yml:
- management.endpoints.web.exposure.include: "*"
- management.endpoint.health.show-details: always
- logging.level.org.springframework.cloud.gateway: DEBUG
- logging.level.org.springframework.cloud.loadbalancer: DEBUG

Puedes bajar a INFO en producción para reducir ruido:
logging.level.org.springframework.cloud.gateway: INFO
logging.level.org.springframework.cloud.loadbalancer: INFO

### Problemas comunes (Gateway)

- Rutas duplicadas (YAML + Java):
  - Puede causar mantenimiento confuso. Elige una única fuente.

- Ruta /eureka/** en Docker:
  - localhost dentro del contenedor no apunta al host. Cambia a http://eureka:8761 o la URL interna correspondiente.

- Servicios no resuelven (404 o 503):
  - Asegura que están registrados en Eureka con el service-id correcto.
  - Verifica que spring.cloud.gateway.discovery.locator.enabled sea true si usas lb://

---

## Ejemplos de prueba (curl)

- Home del Gateway:
  - curl http://localhost:8080/

- Salud del Gateway:
  - curl http://localhost:8080/health

- Rutas informativas:
  - curl http://localhost:8080/routes

- Probar autenticación (proxied a arka-gestor-solicitudes):
  - curl -X POST http://localhost:8080/auth/login -H "Content-Type: application/json" -d '{"identifier":"admin","password":"admin123"}'

- Probar hello-world (requiere servicio registrado):
  - curl http://localhost:8080/api/hello/world

- Acceso al dashboard de Eureka a través del Gateway:
  - curl -I http://localhost:8080/eureka/

- Actuator de Eureka (si habilitas y/o con credenciales):
  - curl -u admin:admin123 http://localhost:8761/actuator/health

---

